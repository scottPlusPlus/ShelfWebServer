// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package main

import (
	"encoding/json"
	"testing"
)

const key0_ = "key1"
const key2_ = "key2"
const key3_ = "key3"
const val1_ = "val1"
const val2_ = "val2"
const val3_ = "val3"

func Test_GetBeforeSet_ReturnsErr_(t *testing.T) {
	repo := NewTableKeyValueRepo()
	_, err := repo.get(key0_, key2_)
	if err == nil {
		t.Errorf("Expected getting value before setting to return error, got nil")
		return
	}
}

func Test_SetThenGet_Succeeds_(t *testing.T) {
	repo := NewTableKeyValueRepo()
	repo.set(key0_, key2_, val1_)
	item, err := repo.get(key0_, key2_)
	if err != nil {
		t.Errorf("Expected to get a value without error, got: " + err.Error())
	}
	if item != val1_ {
		t.Errorf("Expected to value to match what was set ('%v'), got: %v", item, val1_)
	}
}

func Test_SettingDifferentKeys_StoreSeparateVals_(t *testing.T) {
	repo := NewTableKeyValueRepo()
	repo.set(key0_, key2_, val1_)
	repo.set(key0_, key3_, val2_)
	repo.set(key2_, key2_, val3_)
	item, err := repo.get(key0_, key2_)
	if err != nil {
		t.Errorf("Expected to get a value without error, got: " + err.Error())
	}
	if item != val1_ {
		t.Errorf("Expected to value to match what was set ('%v'), got: %v", item, val1_)
	}
	item, err = repo.get(key0_, key3_)
	if err != nil {
		t.Errorf("Expected to get a value without error, got: " + err.Error())
	}
	if item != val2_ {
		t.Errorf("Expected to value to match what was set ('%v'), got: %v", item, val2_)
	}
	item, err = repo.get(key2_, key2_)
	if err != nil {
		t.Errorf("Expected to get a value without error, got: " + err.Error())
	}
	if item != val3_ {
		t.Errorf("Expected to value to match what was set ('%v'), got: %v", item, val3_)
	}
}

func Test_SecondSet_ReplacesValue_(t *testing.T) {
	repo := NewTableKeyValueRepo()
	repo.set(key0_, key2_, val1_)
	repo.set(key0_, key2_, val2_)
	item, err := repo.get(key0_, key2_)
	if err != nil {
		t.Errorf("Expected to get a value without error, got: " + err.Error())
	}
	if item != val2_ {
		t.Errorf("Expected to value to match what was set ('%v'), got: %v", item, val2_)
	}
}

func Test_Append_Appends_(t *testing.T) {
	//TODO - not very clean with GCONST
	repo := NewTableKeyValueRepo()
	repo.append(key0_, val1_)
	item, err := repo.get(key0_, "1")
	if err != nil {
		t.Errorf("Expected to get a value without error, got: " + err.Error())
	}
	if item != val1_ {
		t.Errorf("Expected to value to match what was set ('%v'), got: %v", item, val1_)
	}

	repo.append(key0_, val2_)
	item, err = repo.get(key0_, "2")
	if err != nil {
		t.Errorf("Expected to get a value without error, got: " + err.Error())
	}
	if item != val2_ {
		t.Errorf("Expected to value to match what was set ('%v'), got: %v", item, val2_)
	}
}

func Test_JSONMarshal_Succeeds_(t *testing.T) {
	repo := NewTableKeyValueRepo()
	repo.append(key0_, val1_)
	_, err := json.Marshal(repo)
	if err != nil {
		t.Errorf("Could not marshal data structure:: " + err.Error())
	}
}
